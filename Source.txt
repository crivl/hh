-- Load Venux UI Library
local success, Venux = pcall(function()
    return loadstring(game:HttpGet('https://raw.githubusercontent.com/Stefanuk12/Venux/main/src/venux.lua'))()
end)

if not success or not Venux then
    warn("Failed to load Venux UI Library!")
    return
end

-- Create the main window
local Window = Venux:CreateWindow({
    Name = "TerminalWare V1",
    LoadingTitle = "TerminalWare",
    LoadingSubtitle = "By Ezterminals",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = "TerminalWare",
        FileName = "Config"
    }
})

-- Configuration
getgenv().Rake = {
    Settings = {
        Prediction = 0.03,
        JumpOffSet = 0.06,
        AimPart = "Head",
        Misc = {
            AutoReload = true,
            AutoClicker = false,
            Whitelist = {
                UserWhitelist = false,
                HwidWhitelist = true
            },
            AdvancedMisc = {
                Desync = false,
                AutoShoot = false,
                AutoToxic = false
            }
        },
        AntiGroundShots = true,
        AntiAim = false, -- Added Anti-Aim toggle
        SilentAimKeybind = Enum.KeyCode.C, -- Default keybind for Silent Aim
        AntiAimKeybind = Enum.KeyCode.X, -- Default keybind for Anti-Aim
        CombinedKeybind = Enum.KeyCode.V, -- Default keybind for toggling both
        UseCombinedKeybind = false -- Toggle for using combined keybind
    }
}

-- Variables
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera
local Mouse = LocalPlayer:GetMouse()
local enabled = true

-- RGB Watermark
local function createWatermark()
    local watermark = Instance.new("ScreenGui")
    watermark.Name = "Watermark"
    watermark.Parent = game.CoreGui
    watermark.ResetOnSpawn = false

    local label = Instance.new("TextLabel")
    label.Parent = watermark
    label.Size = UDim2.new(0, 200, 0, 30)
    label.Position = UDim2.new(0.5, -100, 0.02, 0)
    label.BackgroundTransparency = 1
    label.Text = "Made by Criv"
    label.TextColor3 = Color3.new(1, 1, 1)
    label.TextScaled = true
    label.Font = Enum.Font.GothamBold
    label.TextStrokeTransparency = 0.5
    label.TextStrokeColor3 = Color3.new(0, 0, 0)

    -- RGB Color Cycle
    local hue = 0
    game:GetService("RunService").RenderStepped:Connect(function()
        hue = (hue + 0.01) % 1
        label.TextColor3 = Color3.fromHSV(hue, 1, 1)
    end)

    return watermark
end

-- Create the watermark
createWatermark()

-- Create the UI
local MainTab = Window:CreateTab("Main")

-- Silent Aim Toggle
local SilentAimToggle = MainTab:CreateToggle({
    Name = "Enable Silent Aim",
    CurrentValue = enabled,
    Callback = function(Value)
        enabled = Value
    end,
})

-- Anti-Aim Toggle
local AntiAimToggle = MainTab:CreateToggle({
    Name = "Enable Anti-Aim",
    CurrentValue = getgenv().Rake.Settings.AntiAim,
    Callback = function(Value)
        getgenv().Rake.Settings.AntiAim = Value
    end,
})

-- Combined Keybind Toggle
local CombinedKeybindToggle = MainTab:CreateToggle({
    Name = "Use Combined Keybind",
    CurrentValue = getgenv().Rake.Settings.UseCombinedKeybind,
    Callback = function(Value)
        getgenv().Rake.Settings.UseCombinedKeybind = Value
    end,
})

-- Keybind Dropdowns
local KeybindDropdowns = {
    SilentAim = MainTab:CreateDropdown({
        Name = "Silent Aim Keybind",
        Options = {"C", "X", "V", "B", "F", "Q"},
        CurrentOption = "C",
        Callback = function(Option)
            getgenv().Rake.Settings.SilentAimKeybind = Enum.KeyCode[Option]
        end,
    }),
    AntiAim = MainTab:CreateDropdown({
        Name = "Anti-Aim Keybind",
        Options = {"C", "X", "V", "B", "F", "Q"},
        CurrentOption = "X",
        Callback = function(Option)
            getgenv().Rake.Settings.AntiAimKeybind = Enum.KeyCode[Option]
        end,
    }),
    Combined = MainTab:CreateDropdown({
        Name = "Combined Keybind",
        Options = {"C", "X", "V", "B", "F", "Q"},
        CurrentOption = "V",
        Callback = function(Option)
            getgenv().Rake.Settings.CombinedKeybind = Enum.KeyCode[Option]
        end,
    })
}

-- Prediction Slider
local Slider = MainTab:CreateSlider({
    Name = "Prediction",
    Range = {0.01, 0.1},
    Increment = 0.01,
    Suffix = "s",
    CurrentValue = getgenv().Rake.Settings.Prediction,
    Callback = function(Value)
        getgenv().Rake.Settings.Prediction = Value
    end,
})
